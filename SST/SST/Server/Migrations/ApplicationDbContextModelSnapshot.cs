// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SST.Server.Data;

namespace SST.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SST.Shared.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SST.Shared.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SST.Shared.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfUser")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SST.Shared.ContractClause", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClauseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionID");

                    b.HasIndex("FirmID");

                    b.ToTable("ContractClauses");
                });

            modelBuilder.Entity("SST.Shared.ContractClauseElement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractClauseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ElementConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContractClauseID");

                    b.ToTable("ContractClauseElements");
                });

            modelBuilder.Entity("SST.Shared.ContractHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractData")
                        .HasColumnName("ContractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractHistoryStatus")
                        .HasColumnName("ContractHistory")
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnName("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StoreCustomerID")
                        .HasColumnName("StoreCustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserID")
                        .HasColumnName("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FirmID");

                    b.HasIndex("UserID");

                    b.ToTable("ContractHistory");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractTransactionEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NextQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfQuestion")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionEntityID");

                    b.HasIndex("ContractTransactionID");

                    b.ToTable("ContractQuestions");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ContractTemplateID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ContractQuestionAnswers");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswerDataField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionDataFieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_ContractQuestionAnswerDataField");

                    b.HasIndex("AnswerID");

                    b.HasIndex("ContractTransactionDataFieldID");

                    b.ToTable("ContractQuestionAnswerDataFields");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswerIgnoredClause", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractClauseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("ContractClauseID");

                    b.ToTable("ContractQuestionAnswerIgnoredClauses");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionDataField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionDataFieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_ContractQuestionDataField");

                    b.HasIndex("ContractTransactionDataFieldID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ContractQuestionDataFields");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionIgnoredContractClause", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractClauseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ContractClauseID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ContractQuestionIgnoredContractClauses");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionTemplateID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ContractQuestionTemplates");
                });

            modelBuilder.Entity("SST.Shared.ContractTemplateElement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemplateText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionTemplateID");

                    b.ToTable("ContractTemplateElements");
                });

            modelBuilder.Entity("SST.Shared.ContractTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base64Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnGenerateContracts")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnOnlineStore")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("ContractTransactions");
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionDataField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfField")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionID");

                    b.ToTable("ContractTransactionDataFields");
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionID");

                    b.ToTable("ContractTransactionEntities");
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntityClause", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClauseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContractTransactionEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionEntityID");

                    b.ToTable("ContractTransactionEntityClauses");
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntityDataField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfField")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionEntityID");

                    b.ToTable("ContractTransactionEntityDataFields");
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ContractTransactionID");

                    b.ToTable("ContractTransactionTemplates");
                });

            modelBuilder.Entity("SST.Shared.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DailingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SST.Shared.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnName("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowReceivingMails")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnName("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnName("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Customer");

                    b.HasIndex("FirmID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SST.Shared.CustomerDataField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NullText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfField")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("CustomerDataFields");
                });

            modelBuilder.Entity("SST.Shared.CustomerDataFieldValue", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerDataFieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_CustomerDataFieldValue");

                    b.HasIndex("CustomerDataFieldID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerDataFieldValues");
                });

            modelBuilder.Entity("SST.Shared.CustomerDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnName("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentID")
                        .HasColumnName("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_CustomerDocument");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DocumentID");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("SST.Shared.Day", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnName("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Day");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("SST.Shared.Document", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeID")
                        .HasColumnName("DocumentTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnName("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Document");

                    b.HasIndex("DocumentTypeID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SST.Shared.DocumentType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_DocumentType");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("SST.Shared.EmailTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FooterImage")
                        .HasColumnName("FooterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage")
                        .HasColumnName("HeaderImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("SST.Shared.Field", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ControlType")
                        .HasColumnName("ControlType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasColumnName("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NullText")
                        .HasColumnName("NullText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnName("Required")
                        .HasColumnType("bit");

                    b.HasKey("ID")
                        .HasName("PK_Field");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SST.Shared.Firm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminEmail")
                        .HasColumnName("AdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowOnlineStore")
                        .HasColumnType("bit");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FirmEmailSettingID")
                        .HasColumnName("FirmEmailSettingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FirmMeetingSetupID")
                        .HasColumnName("FirmMeetingSetupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirmName")
                        .IsRequired()
                        .HasColumnName("FirmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaygateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaygatePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentGateway")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnName("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNumber")
                        .HasColumnName("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Firm");

                    b.HasIndex("AddressID");

                    b.HasIndex("FirmEmailSettingID")
                        .IsUnique()
                        .HasFilter("[FirmEmailSettingID] IS NOT NULL");

                    b.HasIndex("FirmMeetingSetupID")
                        .IsUnique()
                        .HasFilter("[FirmMeetingSetupID] IS NOT NULL");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("SST.Shared.FirmDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentID")
                        .HasColumnName("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_FirmDocuments");

                    b.HasIndex("DocumentID");

                    b.HasIndex("FirmID");

                    b.ToTable("FirmDocuments");
                });

            modelBuilder.Entity("SST.Shared.FirmEmailSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromAddress")
                        .HasColumnName("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostAddress")
                        .HasColumnName("HostAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnName("Port")
                        .HasColumnType("int");

                    b.Property<bool>("UseSsl")
                        .HasColumnName("UseSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnName("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_FirmEmailSetting");

                    b.ToTable("FirmEmailSettings");
                });

            modelBuilder.Entity("SST.Shared.FirmIntroStep", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntroStepID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.HasIndex("IntroStepID");

                    b.ToTable("CompanyIntroSteps");
                });

            modelBuilder.Entity("SST.Shared.FirmMeetingSetup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowElectrical")
                        .HasColumnName("AllowElectrical")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMeetings")
                        .HasColumnName("AllowMeetings")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPhysical")
                        .HasColumnName("AllowPhysical")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPublicHolidays")
                        .HasColumnName("AllowPublicHolidays")
                        .HasColumnType("bit");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_FirmMeetingSetup");

                    b.ToTable("FirmMeetingSetup");
                });

            modelBuilder.Entity("SST.Shared.FirmStyling", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ButtonColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonFontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Font")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterCenter")
                        .HasColumnType("int");

                    b.Property<int>("FooterHeight")
                        .HasColumnType("int");

                    b.Property<int>("FooterLeft")
                        .HasColumnType("int");

                    b.Property<int>("FooterRight")
                        .HasColumnType("int");

                    b.Property<string>("H1Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("H1Size")
                        .HasColumnType("float");

                    b.Property<string>("H2Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("H2Size")
                        .HasColumnType("float");

                    b.Property<string>("H3Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("H3Size")
                        .HasColumnType("float");

                    b.Property<int>("HeaderCenter")
                        .HasColumnType("int");

                    b.Property<int>("HeaderHeight")
                        .HasColumnType("int");

                    b.Property<int>("HeaderLeft")
                        .HasColumnType("int");

                    b.Property<int>("HeaderRight")
                        .HasColumnType("int");

                    b.Property<string>("HeadingColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndentSetting")
                        .HasColumnType("int");

                    b.Property<int>("LineSpacing")
                        .HasColumnType("int");

                    b.Property<string>("MenuBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuFontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuHeadingColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ParSize")
                        .HasColumnType("float");

                    b.Property<int>("ParagraphPadding")
                        .HasColumnType("int");

                    b.Property<bool>("ShowFooterLine")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowHeaderLine")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("FirmStylings");
                });

            modelBuilder.Entity("SST.Shared.FirmSubscriptionPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<int>("AutoRenewOnDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceHeaderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NrOFUsers")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.HasIndex("InvoiceHeaderID");

                    b.ToTable("FirmSubscriptionPlans");
                });

            modelBuilder.Entity("SST.Shared.IntroStep", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowSkip")
                        .HasColumnType("bit");

                    b.Property<string>("ButtonText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IntroSteps");
                });

            modelBuilder.Entity("SST.Shared.InvoiceHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NrOfUsers")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("InvoiceHeaders");
                });

            modelBuilder.Entity("SST.Shared.InvoiceLine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<Guid?>("InvoiceHeaderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceHeaderID");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("SST.Shared.Meeting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Deescription")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerUserID")
                        .HasColumnName("OwnerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_Meeting");

                    b.HasIndex("OwnerUserID");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("SST.Shared.MeetingParticipant", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingID")
                        .HasColumnName("MeetingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnName("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_MeetingParticipant");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MeetingID");

                    b.ToTable("MeetingParticipants");
                });

            modelBuilder.Entity("SST.Shared.MeetingTimeSlot", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayID")
                        .HasColumnName("DayID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingID")
                        .HasColumnName("MeetingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeSlotID")
                        .HasColumnName("TimeSlotID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_MeetingTimeSlot");

                    b.HasIndex("DayID");

                    b.HasIndex("MeetingID");

                    b.HasIndex("TimeSlotID");

                    b.ToTable("MeetingTimeSlots");
                });

            modelBuilder.Entity("SST.Shared.NonWorkingDay", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnName("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_NonWorkingDay");

                    b.HasIndex("FirmID");

                    b.HasIndex("UserID");

                    b.ToTable("NonWorkingDays");
                });

            modelBuilder.Entity("SST.Shared.PaymentGate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APIPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableOnlineStore")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OnlineStoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Supplier")
                        .HasColumnType("int");

                    b.Property<string>("UrlPrefects")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FirmID");

                    b.ToTable("PaymentGates");
                });

            modelBuilder.Entity("SST.Shared.PublicHoliday", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_PublicHoliday");

                    b.HasIndex("FirmID");

                    b.ToTable("PublicHolidays");
                });

            modelBuilder.Entity("SST.Shared.Screen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Screen");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("SST.Shared.ScreenField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldID")
                        .HasColumnName("FieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScreenID")
                        .HasColumnName("ScreenID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_ScreenField");

                    b.HasIndex("FieldID");

                    b.HasIndex("FirmID");

                    b.HasIndex("ScreenID");

                    b.ToTable("ScreenFields");
                });

            modelBuilder.Entity("SST.Shared.Setting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Setting");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SST.Shared.StoreCustomer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("StoreCustomers");
                });

            modelBuilder.Entity("SST.Shared.StyleVariable", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_StyleVariable");

                    b.ToTable("StyleVariables");
                });

            modelBuilder.Entity("SST.Shared.StyleVariableValue", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmID")
                        .HasColumnName("FirmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariableID")
                        .HasColumnName("VariableID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VariableValue")
                        .HasColumnName("VariableValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_StyleVariableValue");

                    b.HasIndex("FirmID");

                    b.HasIndex("VariableID");

                    b.ToTable("StyleVariableValues");
                });

            modelBuilder.Entity("SST.Shared.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultPlan")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyPrice")
                        .HasColumnType("float");

                    b.Property<int>("ValidForDays")
                        .HasColumnType("int");

                    b.Property<double>("YearlyPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SST.Shared.TimeSlot", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_TimeSlot");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("SST.Shared.UserAvailability", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Availability")
                        .HasColumnName("Availability")
                        .HasColumnType("int");

                    b.Property<Guid>("DayID")
                        .HasColumnName("DayID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeSlotID")
                        .HasColumnName("TimeSlotID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnName("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID")
                        .HasName("PK_UserAvailability");

                    b.HasIndex("DayID");

                    b.HasIndex("TimeSlotID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAvailabilities");
                });

            modelBuilder.Entity("VezaVI.Light.Shared.AuditLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SST.Shared.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SST.Shared.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SST.Shared.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SST.Shared.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SST.Shared.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractClause", b =>
                {
                    b.HasOne("SST.Shared.ContractTransaction", "ContractTransaction")
                        .WithMany()
                        .HasForeignKey("ContractTransactionID");

                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractClauseElement", b =>
                {
                    b.HasOne("SST.Shared.ContractClause", "ContractClause")
                        .WithMany()
                        .HasForeignKey("ContractClauseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractHistory", b =>
                {
                    b.HasOne("SST.Shared.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("SST.Shared.ContractQuestion", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionEntity", "ContractTransactionEntity")
                        .WithMany()
                        .HasForeignKey("ContractTransactionEntityID");

                    b.HasOne("SST.Shared.ContractTransaction", "ContractTransaction")
                        .WithMany()
                        .HasForeignKey("ContractTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswer", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionTemplate", "ContractTemplate")
                        .WithMany()
                        .HasForeignKey("ContractTemplateID");

                    b.HasOne("SST.Shared.ContractQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswerDataField", b =>
                {
                    b.HasOne("SST.Shared.ContractQuestionAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SST.Shared.ContractTransactionDataField", "ContractTransactionDataField")
                        .WithMany()
                        .HasForeignKey("ContractTransactionDataFieldID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionAnswerIgnoredClause", b =>
                {
                    b.HasOne("SST.Shared.ContractQuestionAnswer", "Answer")
                        .WithMany("IgnoredContractClauses")
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ContractClause", "ContractClause")
                        .WithMany()
                        .HasForeignKey("ContractClauseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionDataField", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionDataField", "ContractTransactionDataField")
                        .WithMany()
                        .HasForeignKey("ContractTransactionDataFieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ContractQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionIgnoredContractClause", b =>
                {
                    b.HasOne("SST.Shared.ContractClause", "ContractClause")
                        .WithMany()
                        .HasForeignKey("ContractClauseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ContractQuestion", "Question")
                        .WithMany("IgnoredContractClauses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractQuestionTemplate", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionTemplate", "ContractTransactionTemplate")
                        .WithMany()
                        .HasForeignKey("ContractTransactionTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ContractQuestion", "Question")
                        .WithMany("Templates")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTemplateElement", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionTemplate", "ContractTransactionTemplate")
                        .WithMany()
                        .HasForeignKey("ContractTransactionTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransaction", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionDataField", b =>
                {
                    b.HasOne("SST.Shared.ContractTransaction", "ContractTransaction")
                        .WithMany()
                        .HasForeignKey("ContractTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntity", b =>
                {
                    b.HasOne("SST.Shared.ContractTransaction", "ContractTransaction")
                        .WithMany()
                        .HasForeignKey("ContractTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntityClause", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionEntity", "ContractTransactionEntity")
                        .WithMany()
                        .HasForeignKey("ContractTransactionEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionEntityDataField", b =>
                {
                    b.HasOne("SST.Shared.ContractTransactionEntity", "ContractTransactionEntity")
                        .WithMany()
                        .HasForeignKey("ContractTransactionEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ContractTransactionTemplate", b =>
                {
                    b.HasOne("SST.Shared.ContractTransaction", "ContractTransaction")
                        .WithMany("ContractTransactionTemplates")
                        .HasForeignKey("ContractTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.Customer", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany("FirmCustomers")
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.CustomerDataField", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.CustomerDataFieldValue", b =>
                {
                    b.HasOne("SST.Shared.CustomerDataField", "CustomerDataField")
                        .WithMany()
                        .HasForeignKey("CustomerDataFieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.CustomerDocument", b =>
                {
                    b.HasOne("SST.Shared.Customer", "Customer")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.Document", "Document")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.Document", b =>
                {
                    b.HasOne("SST.Shared.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.EmailTemplate", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.Firm", b =>
                {
                    b.HasOne("SST.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("SST.Shared.FirmEmailSetting", "FirmEmailSetting")
                        .WithOne("Firm")
                        .HasForeignKey("SST.Shared.Firm", "FirmEmailSettingID");

                    b.HasOne("SST.Shared.FirmMeetingSetup", "FirmMeetingSetups")
                        .WithOne("Firm")
                        .HasForeignKey("SST.Shared.Firm", "FirmMeetingSetupID");
                });

            modelBuilder.Entity("SST.Shared.FirmDocument", b =>
                {
                    b.HasOne("SST.Shared.Document", "Document")
                        .WithMany("FirmDocuments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany("FirmDocuments")
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.FirmIntroStep", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.IntroStep", "IntroStep")
                        .WithMany()
                        .HasForeignKey("IntroStepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.FirmStyling", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.FirmSubscriptionPlan", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.InvoiceHeader", "InvoiceHeader")
                        .WithMany()
                        .HasForeignKey("InvoiceHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.InvoiceHeader", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.InvoiceLine", b =>
                {
                    b.HasOne("SST.Shared.InvoiceHeader", null)
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceHeaderID");
                });

            modelBuilder.Entity("SST.Shared.Meeting", b =>
                {
                    b.HasOne("SST.Shared.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.MeetingParticipant", b =>
                {
                    b.HasOne("SST.Shared.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SST.Shared.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.MeetingTimeSlot", b =>
                {
                    b.HasOne("SST.Shared.Day", "Day")
                        .WithMany("MeetingTimeSlots")
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.NonWorkingDay", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.PaymentGate", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmID");
                });

            modelBuilder.Entity("SST.Shared.PublicHoliday", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany("PublicHolidays")
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.ScreenField", b =>
                {
                    b.HasOne("SST.Shared.Field", "Field")
                        .WithMany("ScreenFields")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany("ScreenFields")
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.Screen", "Screen")
                        .WithMany("ScreenFields")
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.StyleVariableValue", b =>
                {
                    b.HasOne("SST.Shared.Firm", "Firm")
                        .WithMany("StyleVariableValues")
                        .HasForeignKey("FirmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SST.Shared.StyleVariable", "StyleVariable")
                        .WithMany("StyleVariableValues")
                        .HasForeignKey("VariableID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Shared.UserAvailability", b =>
                {
                    b.HasOne("SST.Shared.Day", "Day")
                        .WithMany("UserAvailabilities")
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Shared.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
