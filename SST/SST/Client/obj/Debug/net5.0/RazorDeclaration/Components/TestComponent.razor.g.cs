// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SST.Client.Components
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.Net.Http.Json

#nullable disable
    ;
#nullable restore
#line 3 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line 4 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 5 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 6 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 7 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http

#nullable disable
    ;
#nullable restore
#line 8 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 9 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using SST.Client

#nullable disable
    ;
#nullable restore
#line 10 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using SST.Client.Shared

#nullable disable
    ;
#nullable restore
#line 11 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using SST.Shared

#nullable disable
    ;
#nullable restore
#line 12 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 13 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.Text.Json

#nullable disable
    ;
#nullable restore
#line 14 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Blazored.LocalStorage

#nullable disable
    ;
#nullable restore
#line 15 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.Net.Http.Headers

#nullable disable
    ;
#nullable restore
#line 16 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Microsoft.AspNetCore.Identity

#nullable disable
    ;
#nullable restore
#line 17 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using VezaVI.Light.Components

#nullable disable
    ;
#nullable restore
#line 18 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using VezaVI.Light.Shared

#nullable disable
    ;
#nullable restore
#line 19 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Blazored.Modal

#nullable disable
    ;
#nullable restore
#line 20 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using Blazored.Modal.Services

#nullable disable
    ;
#nullable restore
#line 21 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.Security.Claims

#nullable disable
    ;
#nullable restore
#line 22 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using System.IO

#nullable disable
    ;
#nullable restore
#line 23 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using SixLabors.ImageSharp

#nullable disable
    ;
#nullable restore
#line 24 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\_Imports.razor"
using SixLabors.ImageSharp.Processing

#line default
#line hidden
#nullable disable
    ;
    #nullable restore
    public partial class TestComponent : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 170 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
       

    private string CalculateChecksum()
    {
        return VezaVIUtils.CreateMD5(VERSION + "|" + PAYGATE_ID + "|" + REFERENCE + "|" + AMOUNT + "|" + CURRENCY + "|" +
            RETURN_URL + "|" + TRANSACTION_DATE + "|" + EMAIL + "|" + SUBS_START_DATE + "|" + SUBS_END_DATE + "|" +
            SUBS_FREQUENCY + "|" + PROCESS_NOW + "|" + PROCESS_NOW_AMOUNT + "|" + KEY);
    }

    private string VERSION = "21";
    private string PAYGATE_ID = "10011072130";
    private string REFERENCE = "";
    private string AMOUNT = "0";
    public string CURRENCY = "ZAR";
    public string RETURN_URL = "";
    public string EMAIL = "nando.mangels@gmail.com";
    public string TRANSACTION_DATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm");
    public string SUBS_START_DATE = DateTime.Now.ToString("yyyy-MM-dd");
    public string SUBS_END_DATE = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd");
    public string SUBS_FREQUENCY = "228";
    public string PROCESS_NOW = "NO";
    public string PROCESS_NOW_AMOUNT = "";
    public string KEY = "secret";

    QuestionSimulation simulation = new QuestionSimulation();
    QuestionToken token = new QuestionToken();
    ContractQuestion currentQuestion = null;
    string testValue { get; set; }
    public bool isCompleted { get; set; } = false;
    private Guid _transactionID;
    [Parameter]
    public Guid TransactionID
    {
        get
        {
            return _transactionID;
        }
        set
        {
            _transactionID = value;
        }
    }
    [Parameter]
    public bool IsOnlineStore { get; set; }

    public int Answer { get; set; } = 1;
    Guid answerID = Guid.Empty;
    void SelectionChanged(ChangeEventArgs args)
    {
        answerID = new Guid(args.Value.ToString());
    }

    private Dictionary<Guid, string> _questionText = new Dictionary<Guid, string>();
    private Dictionary<Guid, string> _answerText = new Dictionary<Guid, string>();
    private Dictionary<Guid, string> _dataFields = new Dictionary<Guid, string>();

    private bool ShowErrors;
    private string Error = "";

    protected async override Task OnInitializedAsync()
    {
        token = await QuestionProcessService.GetRootQuestion(TransactionID);
        simulation = await LocalStorage.GetItemAsync<QuestionSimulation>("QuestionSimulation");

        foreach (var dataFields in token.DataFields)
        {
            var dataField = simulation.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
            if (dataField == null)
            {
                simulation.DataFields.Add(new QuestionSimulationDataToken(dataFields.DataFieldID));
            }
            if (!_dataFields.ContainsKey(dataFields.DataFieldID))
                _dataFields.Add(dataFields.DataFieldID, dataFields.DisplayText);
        }
        foreach (var answer in token.Answers)
        {
            foreach (var dataFields in answer.DataFields)
            {
                var dataField = simulation.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                if (dataField == null)
                {
                    simulation.DataFields.Add(new QuestionSimulationDataToken(dataFields.DataFieldID));
                }
                if (!_dataFields.ContainsKey(dataFields.DataFieldID))
                    _dataFields.Add(dataFields.DataFieldID, dataFields.DisplayText);
            }
        }

        if (token.Entity != null)
        {
            var entity = simulation.Entities.FirstOrDefault(x => x.EntityID == token.EntityID);
            if (entity == null)
            {
                entity = new QuestionSimulationEntityToken()
                {
                    EntityID = token.Entity.EntityID,
                    Name = token.Entity.Name
                };
                simulation.Entities.Add(entity);
            }
            foreach (var dataFields in token.Entity.DataFields)
            {
                var dataField = entity.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                if (dataField == null)
                {
                    entity.DataFields.Add(new QuestionSimulationEntityDataToken(dataFields.DataFieldID));
                }
                if (!_dataFields.ContainsKey(dataFields.DataFieldID))
                    _dataFields.Add(dataFields.DataFieldID, dataFields.DisplayText);
            }
        }
    }

    private void LoadQuestion(Guid id)
    {

    }

    private bool Validate()
    {
        if (token.QuestionType == (int)QuestionType.CustomOptions)
        {
            if (answerID == Guid.Empty)
            {
                Error = "Please select an Answer";
                return false;
            }
        }
        else if (token.QuestionType == (int)QuestionType.Quantity)
        {
            if (Answer <= 0)
            {
                Error = $"The number of {VezaVIUtils.Plural(token.Entity.Name)} cannot be 0 or below.";
                return false;
            }
        }
        return true;
    }

    public async Task Back()
    {

        var prev = prevQuestion.Last();
        var first = prevQuestion.First();
        prevQuestion.Remove(prev);

        if (prev == first)
        {
            Error = "You cannot return answer all the questions first";
        }

        if (prev != null)
        {
            token = await QuestionProcessService.GetQuestion((Guid)prev);
            foreach (var dataFields in token.DataFields)
            {
                var dataField = simulation.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                if (dataField == null)
                {
                    simulation.DataFields.Add(new QuestionSimulationDataToken(dataFields.DataFieldID));
                }
            }
            if (token.Entity != null)
            {
                var entity = simulation.Entities.FirstOrDefault(x => x.EntityID == token.EntityID);
                if (entity == null)
                {
                    entity = new QuestionSimulationEntityToken()
                    {
                        EntityID = token.Entity.EntityID,
                        Name = token.Entity.Name
                    };
                    simulation.Entities.Add(entity);
                }
                foreach (var dataFields in token.Entity.DataFields)
                {
                    var dataField = entity.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                    if (dataField == null)
                    {
                        entity.DataFields.Add(new QuestionSimulationEntityDataToken(dataFields.DataFieldID));
                    }
                }
            }
            Answer = (token.QuestionType == (int)QuestionType.Quantity) ? simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID).Answer : -1;
            answerID = (token.QuestionType == (int)QuestionType.CustomOptions) ? (Guid)simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID).AnswerID : Guid.Empty;
        }
    }
    private bool _summary = false;
    List<Guid> prevQuestion = new List<Guid>();
    private async Task SaveAndNext()
    {

        if (Validate())
        {
            if (!_questionText.ContainsKey(token.QuestionID))
                _questionText.Add(token.QuestionID, token.QuestionText);

            if (answerID != Guid.Empty && !_answerText.ContainsKey(answerID))
                _answerText.Add(answerID, token.Answers.FirstOrDefault(x => x.AnswerID == answerID).OptionText);

            prevQuestion.Add(token.QuestionID);
            if (token.QuestionType == (int)QuestionType.Quantity)
            {
                var entity = simulation.Entities.FirstOrDefault(x => x.EntityID == token.EntityID);
                entity.NrOfEntities = Answer;
            }
            /*Save*/
            var question = simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID);
            if (question != null)
            {
                question.AnswerID = answerID;
                question.Answer = Answer;
            }
            else
            {
                simulation.Questions.Add(new QuestionSimulationToken()
                {
                    QuestionID = token.QuestionID,
                    AnswerID = answerID,
                    Answer = Answer
                });
            }
            await LocalStorage.SetItemAsync<QuestionSimulation>("QuestionSimulation", simulation);
            /*Has Next Question?*/
            var nextQuestionID = (token.QuestionType == (int)QuestionType.CustomOptions) ? token.Answers.FirstOrDefault(x => x.AnswerID == answerID).NextQuestionID : token.NextQuestionID;
            if (nextQuestionID != null)
            {
                token = await QuestionProcessService.GetQuestion((Guid)nextQuestionID);
                foreach (var dataFields in token.DataFields)
                {
                    var dataField = simulation.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                    if (dataField == null)
                    {
                        simulation.DataFields.Add(new QuestionSimulationDataToken(dataFields.DataFieldID));
                    }
                    if (!_dataFields.ContainsKey(dataFields.DataFieldID))
                        _dataFields.Add(dataFields.DataFieldID, dataFields.DisplayText);
                }
                if (token.Entity != null)
                {
                    var entity = simulation.Entities.FirstOrDefault(x => x.EntityID == token.EntityID);
                    if (entity == null)
                    {
                        entity = new QuestionSimulationEntityToken()
                        {
                            EntityID = token.Entity.EntityID,
                            Name = token.Entity.Name
                        };
                        simulation.Entities.Add(entity);
                    }
                    foreach (var dataFields in token.Entity.DataFields)
                    {
                        var dataField = entity.DataFields.FirstOrDefault(x => x.DataFieldID == dataFields.DataFieldID);
                        if (dataField == null)
                        {
                            entity.DataFields.Add(new QuestionSimulationEntityDataToken(dataFields.DataFieldID));
                        }
                        if (!_dataFields.ContainsKey(dataFields.DataFieldID))
                            _dataFields.Add(dataFields.DataFieldID, dataFields.DisplayText);
                    }
                }
                var quest = simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID);
                if (quest != null)
                {
                    Answer = (token.QuestionType == (int)QuestionType.Quantity) ? simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID).Answer : -1;
                    answerID = (token.QuestionType == (int)QuestionType.CustomOptions) ? (Guid)simulation.Questions.FirstOrDefault(x => x.QuestionID == token.QuestionID).AnswerID : Guid.Empty;
                }
                else
                {
                    Answer = 1;
                    answerID = Guid.Empty;
                }
            }
            else
            {
                _summary = true;
            }
            StateHasChanged();

            ShowErrors = false;
        }
        else
        {
            ShowErrors = true;
        }
    }

    public void ShowMsg()
    {
        ModalParameters param = new ModalParameters();
        param.Add("Message", token.Info);
        ModalService.Show(typeof(MsgBox), "Question Information", param);
    }

    private async Task Complete()
    {
        /*Save Transaction*/
        /*Save to DB History*/
        //simulation = await LocalStorage.GetItemAsync<QuestionSimulation>("QuestionSimulation");
        //var SaveToken = await LocalStorage.GetItemAsync<string>("QuestionSimulation");
        var result = await ContractHistoryService.UpdateContentJson(simulation);
        if (result.Successful)
        {
            if (IsOnlineStore)
            {
                REFERENCE = TransactionID.ToString();
                AMOUNT = result.AdditionalValue.ToString();
                RETURN_URL = $"{NavigationManager.BaseUri}contractsummary/{result.EntityID}";
                isCompleted = true;
            }
            else
            {
                NavigationManager.NavigateTo($"/contractsummary/{result.EntityID}");
            }
        }
        else
        {

        }
    }

    private async Task GoBack()
    {
        _summary = false;
    }


#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 5 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
        IModalService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 5 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
                      ModalService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 4 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
        IContractHistoryService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 4 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
                                ContractHistoryService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 3 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
        ILocalStorageService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 3 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
                             LocalStorage

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 2 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
        IQuestionProcessService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 2 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
                                QuestionProcessService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 1 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
        NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 1 "D:\Code\CloudberrySoftwareSolutions\SST-Law\ContractBuilder-main\SST\SST\Client\Components\TestComponent.razor"
                          NavigationManager

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
