@page "/store"
@layout EmptyLayout
@namespace SST.Client
@inject ITenantHelperService TenantHelperService
@inject IJSRuntime JSRuntime
@inject IVezaDataService<ContractTransaction> ContractTypeService
@inject NavigationManager NavigationManager

@if (ContractTransactions != null)
{
    <div class="store-content">
        <center><h1>@storemodel.Caption</h1></center>
        <div class="vi-grid-tiles">
            @foreach (ContractTransaction contractTransaction in ContractTransactions)
            {
                <ContractTile PriceInfo="@($"R{contractTransaction.MinPrice} - R{contractTransaction.MaxPrice}")" ID="@contractTransaction.ID" Caption="@contractTransaction.Name" Base64Background="@contractTransaction.Base64Background" Information="@contractTransaction.Information" OnClick="GoToQuestion" />
            }
        </div>
    </div>
}
@code {

    public List<ContractTransaction> ContractTransactions = new List<ContractTransaction>();
    private StoreModel storemodel = new StoreModel();
    IList<VezaVIGridFilter> filters;
    public Guid FirmID = Guid.Empty;


    public async override Task SetParametersAsync(ParameterView parameters)
    {
        var firmID = await TenantHelperService.GetTenant();

        if (firmID != Guid.Empty)
        {
            storemodel = await TenantHelperService.GetStoreInfo(firmID);
            var styling = await TenantHelperService.GetBranding(firmID);
            await styling.ActivateBranding(JSRuntime, NavigationManager);

            filters = new List<VezaVIGridFilter>() {
                new VezaVIGridFilter() { Field = "FirmID", Value = firmID.ToString(), Equals = true },
                new VezaVIGridFilter() { Field = "ShowOnOnlineStore", Value = "true", Equals = true },
                new VezaVIGridFilter() { Field = "IsActive", Value = "true".ToString(), Equals = true }

            };

            var pagedContractTypes = await ContractTypeService.GetAllAsync("Name", filters);
            ContractTransactions = pagedContractTypes.Items;
            StateHasChanged();
            if (!storemodel.IsEnabled)
                NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

    }

    public void GoToQuestion(TileClickEvent e)
    {
        NavigationManager.NavigateTo($"/startstorequestion/{e.TileID}");
    }
}
