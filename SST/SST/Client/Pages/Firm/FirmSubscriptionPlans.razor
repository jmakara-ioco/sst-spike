@page "/firmsubscriptionplans"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject HttpClient HttpClient
@inject ISubscriptionService SubscriptionService

<div class="card">
    <div class="card-body">
        <div class="slidecontainer">
            <h5>Select number of Users</h5>
            <input type="range" min="1" max="20" @bind-value="CurrentPlanUsers" class="slider">
        </div>

        <h5>Select your prefered Subscription Plan</h5>
        @if (Plan != null)
        {
            <div class="subscription-columns">
                <ul class="subscription-price">
                    <li class="header">Monthly</li>
                    <li class="grey">R @(MonthlyAmount) / month</li>
                    <li>R @Plan.MonthlyPrice per user</li>
                    <li>@CurrentPlanUsers users</li>
                    <li>Yearly cost of R @(Plan.MonthlyPrice * 12 * CurrentPlanUsers)</li>
                    <li class="grey"><a href="#" class="subscription-button" @onclick:preventDefault @onclick="Monthly">Sign Up</a></li>
                </ul>
            </div>

            <div class="subscription-columns">
                <ul class="subscription-price">
                    <li class="header">Yearly</li>
                    <li class="grey">R @YearlyAmount / year</li>
                    <li>R @Plan.YearlyPrice per user</li>
                    <li>@CurrentPlanUsers users</li>
                    <li>You save R @((Plan.MonthlyPrice - Plan.YearlyPrice) * 12 * CurrentPlanUsers) per year</li>
                    <li class="grey"><a href="#" class="subscription-button" @onclick:preventDefault @onclick="Yearly">Sign Up</a></li>
                </ul>
            </div>
        }
        else
        {
            <p>Loading available plans</p>
        }
    </div>
</div>
@code
{
    private int _currentPlanUsers = 1;
    private int CurrentPlanUsers
    {
        get
        {
            return _currentPlanUsers;
        }
        set
        {
            _currentPlanUsers = value;
            Refresh();
        }
    }

    SubscriptionPlan Plan;

    protected async override Task OnInitializedAsync()
    {
        Refresh();
    }

    private async void Refresh()
    {
        var tokenResult = await LocalStorage.GetItemAsync<string>("authToken");

        var request = new HttpRequestMessage(HttpMethod.Get, $"/api/GetAvailablePlans/{CurrentPlanUsers}");
        request.Headers.Authorization = new AuthenticationHeaderValue("bearer", tokenResult);
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var resultstr = await response.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(resultstr))
            {
                var nextStep = JsonSerializer.Deserialize<SubscriptionPlan>(resultstr, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                Plan = nextStep;
                StateHasChanged();
            }
            else
                Plan = null;
        }
        else
            Plan = null;
    }

    public double MonthlyAmount
    {
        get
        {
            return Plan.MonthlyPrice * CurrentPlanUsers;
        }
    }

    public double YearlyAmount
    {
        get
        {
            return Plan.YearlyPrice * CurrentPlanUsers * 12;
        }
    }

    private async Task Monthly()
    {
        SubscriptionToken token = new SubscriptionToken() { Amount = MonthlyAmount, Frequency = "Monthly", Users = CurrentPlanUsers };
        var result = await SubscriptionService.GenerateInvoice(token);
        if (result.Successful)
            NavigationManager.NavigateTo($"/confirmsubscription/{result.EntityID}");
    }

    private async Task Yearly()
    {
        SubscriptionToken token = new SubscriptionToken() { Amount = YearlyAmount, Frequency = "OnceOff", Users = CurrentPlanUsers };
        var result = await SubscriptionService.GenerateInvoice(token);
        if (result.Successful)
            NavigationManager.NavigateTo($"/confirmsubscription/{result.EntityID}");
    }

}
