@page "/confirmsubscription/{transactionID:guid}"
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ISubscriptionService SubscriptionService
@inject AuthenticationStateProvider AuthenticationStateProvider

    <div class="card">
        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }
        <div class="card-body">
            <form action="https://www.paygate.co.za/paysubs/process.trans" method="POST">
                <h3>Confirm Subscription</h3>
                <div class="form-group">
                    <label for="users">Number of Users</label>
                    <label Id="users" Class="form-control">@Users</label>
                </div>
                <div class="form-group">
                    <label for="paymentfrequency">Payment Frequency</label>
                    <label Id="paymentfrequency" Class="form-control">@PaymentFrequency</label>
                </div>
                <div class="form-group">
                    <label for="paymentfrequency">Billed On Day</label>
                    <select Id="CountryID" class="form-control" @bind="@SUBS_FREQUENCY">
                        @foreach (var options in PaymentOptions)
                        {
                            <option value="@options.Key">@options.Value</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="total">Total</label>
                    <label Id="users" Class="form-control">R @(Convert.ToInt32(AMOUNT) / 100)</label>
                </div>
                <input type="hidden" name="VERSION" value="@VERSION">
                <input type="hidden" name="PAYGATE_ID" value="@PAYGATE_ID">
                <input type="hidden" name="REFERENCE" value="@REFERENCE">
                <input type="hidden" name="AMOUNT" value="@AMOUNT">
                <input type="hidden" name="CURRENCY" value="@CURRENCY">
                <input type="hidden" name="RETURN_URL" value="@RETURN_URL">
                <input type="hidden" name="EMAIL" value="@EMAIL">
                <input type="hidden" name="TRANSACTION_DATE" value="@TRANSACTION_DATE">
                <input type="hidden" name="SUBS_START_DATE" value="@SUBS_START_DATE">
                <input type="hidden" name="SUBS_END_DATE" value="@SUBS_END_DATE">
                <input type="hidden" name="SUBS_FREQUENCY" value="@SUBS_FREQUENCY">
                <input type="hidden" name="PROCESS_NOW" value="@PROCESS_NOW">
                <input type="hidden" name="PROCESS_NOW_AMOUNT" value="@PROCESS_NOW_AMOUNT">
                <input type="hidden" name="KEY" value="@KEY">
                <input type="hidden" name="CHECKSUM" value="@CalculateChecksum()">
                <button class="btn btn-primary" type="submit">Pay Now</button>
            </form>
        </div>
    </div>



    @code {

        [Parameter]
        public Guid transactionID { get; set; }

        private bool ShowErrors;
        private string Error = "";

        private int Users = 1;
        private string PaymentFrequency = "Monthly";
        private string VERSION = "21";
        private string PAYGATE_ID = "10011072130";
        private string REFERENCE = "";
        private string AMOUNT = "0";
        public string CURRENCY = "ZAR";
        public string RETURN_URL = "";
        public string EMAIL = "nando.mangels@gmail.com";
        public string TRANSACTION_DATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm");
        public string SUBS_START_DATE = DateTime.Now.ToString("yyyy-MM-dd");
        public string SUBS_END_DATE = DateTime.Now.AddYears(1).ToString("yyyy-MM-dd");
        public string SUBS_FREQUENCY = "228";
        public string PROCESS_NOW = "NO";
        public string PROCESS_NOW_AMOUNT = "";
        public string KEY = "secret";

        private Dictionary<string, string> PaymentOptions = new Dictionary<string, string>();
        private InvoiceHeader Invoice { get; set; }
        protected async override Task OnInitializedAsync()
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            Invoice = await SubscriptionService.GetInvoice(transactionID);
            Users = Invoice.NrOfUsers;
            PaymentFrequency = Invoice.BillingFrequency;
            var total = Invoice.GetTotalPrice();
            AMOUNT = (total * 100).ToString();
            RETURN_URL = $"{NavigationManager.BaseUri}paymentresult";
            REFERENCE = Invoice.TransactionNumber;
            EMAIL = state.User.Identity.Name;

            for (int i = 1; i <= 29; i++)
            {
                if (i != 29)
                    PaymentOptions.Add((200 + i).ToString(), i.ToString());
                else
                    PaymentOptions.Add((200 + i).ToString(), "Last day of Month");
            }
        }

        private string CalculateChecksum()
        {
            return VezaVIUtils.CreateMD5(VERSION + "|" + PAYGATE_ID + "|" + REFERENCE + "|" + AMOUNT + "|" + CURRENCY + "|" +
                RETURN_URL + "|" + TRANSACTION_DATE + "|" + EMAIL + "|" + SUBS_START_DATE + "|" + SUBS_END_DATE + "|" +
                SUBS_FREQUENCY + "|" + PROCESS_NOW + "|" + PROCESS_NOW_AMOUNT + "|" + KEY);
        }



    }
