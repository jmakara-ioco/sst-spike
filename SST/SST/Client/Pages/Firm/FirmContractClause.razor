@page "/firmcontractclause"
@page "/firmcontractclause/{contractclauseid:guid}"
@inject IVezaDataService<ContractClause> ContractClauseService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IVezaDataService<ContractTransactionDataField> ContractTransactionDataFieldService
@inject IVezaDataService<FirmStyling> FirmStylingService
@inject IEditorEntityClauseService EditorEntityClauseService

@inject IJSRuntime JS
@namespace SST.Client


@((MarkupString)Style)

<div class="card">
    @if (Errors.Count() > 0)
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in Errors)
            {
                <p>@error</p>
            }
        </div>
    }
<div class="card-body">
    <VezaVITabControl>
        <VezaVITab Caption="Contract Clause Info">
            <EditForm Model="ContractClause" OnValidSubmit="SaveContractClause" Context="item">
                <div class="form-group">
                    <label for="Code">Code</label>
                    <InputText Id="Code" Class="form-control" @bind-Value="ContractClause.Code" />
                    <ValidationMessage For="@(() => ContractClause.Code)" />
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </VezaVITab>
        @if (ContractClauseID != Guid.Empty)
        {
            <VezaVITab Caption="Clause Designer" LoadOnFocus="false">
                <VezaRichEditor OnSave="OnSave">
                    <Toolbar1>
                        @if (ContractTransactionID != Guid.Empty)
                        {
                            <select onchange="addUDF(this[this.selectedIndex].text, this[this.selectedIndex].value);this.selectedIndex=0;">
                                <option class="heading" selected>Insert User Field</option>
                                @foreach (var udf in userFields)
                                {
                                    <option value="@udf.ID.ToString().ToLower()">@udf.FieldName</option>
                                }
                            </select>
                            <select onchange="addClause(this[this.selectedIndex].text, this[this.selectedIndex].value);this.selectedIndex=0;">
                                <option class="heading" selected>Insert Clause</option>
                                @foreach (var clause in userClauses)
                                {
                                    <option value="@clause.ID.ToString().ToLower()">@clause.Code</option>
                                }
                            </select>
                            <select onchange="addEntityClause(this[this.selectedIndex].text, this[this.selectedIndex].value);this.selectedIndex=0;">
                                <option class="heading" selected>Insert Grouped Field Clause</option>
                                @foreach (var clause in userEntityClauses)
                                {
                                    <option value="@clause.ContractTransactionEntityClauseID.ToString().ToLower()">@clause.ContractTransactionEntityName - @clause.ClauseName</option>
                                }
                            </select>
                        }
                    </Toolbar1>
                </VezaRichEditor>
            </VezaVITab>
        }
    </VezaVITabControl>
    @if (ContractTransactionID != Guid.Empty)
    {
        <div class="form-group">
            <button class="btn btn-primary" @onclick="Back">Back To Contract Transaction</button>
        </div>
    }
</div>
</div>

@code {
    private MarkupString Style { get; set; }

    private Guid _contractClauseID = Guid.Empty;
    [Parameter]
    public Guid ContractClauseID
    {
        get
        {
            return _contractClauseID;
        }
        set
        {
            _contractClauseID = value;
        }
    }

    private Guid ContractTransactionID { get; set; } = Guid.Empty;

    private ContractClause ContractClause { get; set; } = new ContractClause();
    public IEnumerable<string> Errors { get; set; } = new List<string>();
    public List<ContractTransactionDataField> userFields = new List<ContractTransactionDataField>();
    public List<ContractClause> userClauses = new List<ContractClause>();
    public List<EditorEntityClause> userEntityClauses = new List<EditorEntityClause>();

    protected async override Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        var firmID = new Guid(user.Claims.FirstOrDefault(x => x.Type == "CompanyID").Value);

        var PagedFirmStyling = await FirmStylingService.GetAllAsync("ID", new List<VezaVIGridFilter>() {
                    new VezaVIGridFilter() { Field = "FirmID", Value = firmID.ToString(), Equals = true }
                });
        if (PagedFirmStyling.Items.Count > 0)
        {
            Style = (MarkupString)PagedFirmStyling.Items[0].GenerateStyleSheet();
        }

        ContractClause = await ContractClauseService.GetAsync(ContractClauseID);

        string contractTransactionID = string.Empty;
        if (NavigationManager.Uri.Contains("ContractTransactionID"))
        {
            NavigationManager.TryGetQueryString<string>("ContractTransactionID", out contractTransactionID);
            if (contractTransactionID != string.Empty)
                ContractTransactionID = new Guid(contractTransactionID);
            var udfs = await ContractTransactionDataFieldService.GetAllAsync("FieldName", new List<VezaVIGridFilter>() {
            new VezaVIGridFilter() { Field = "ContractTransactionID", Value = contractTransactionID.ToString(), Equals = true }

        });
            userFields = udfs.Items;
        }


        var clauses = await ContractClauseService.GetAllAsync("Code", new List<VezaVIGridFilter>() {
            new VezaVIGridFilter() { Field = "FirmID", Value = firmID.ToString(), Equals = true }
        });
        userClauses = clauses.Items;

        userEntityClauses = await EditorEntityClauseService.GetEditorEntityClauses(ContractTransactionID);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (ContractClauseID != Guid.Empty)
        {
            string value =(ContractClause.ClauseText == null) ? String.Empty : ContractClause.ClauseText;
            value = DocumentParser.ParseToDisplay(value, userFields, userClauses, new List<ContractTransactionEntityDataField>(), userEntityClauses);
            await JS.InvokeAsync<string>("setDocText", value);
        }
    }

    public async Task SaveContractClause()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        var firmID = new Guid(user.Claims.FirstOrDefault(x => x.Type == "CompanyID").Value);
        ContractClause.FirmID = firmID;
        ContractClause.ContractTransactionID = (ContractTransactionID == Guid.Empty) ? null : (Guid?)ContractTransactionID;
        Errors = new List<string>();
        VezaAPISubmitResult result;
        if (ContractClauseID == Guid.Empty)
        {
            result = await ContractClauseService.AddAsync(ContractClause);
        }
        else
            result = await ContractClauseService.UpdateAsync(ContractClause);
        if (!result.Successful)
        {
            Errors = result.Errors;
        }
        else if (ContractClauseID == Guid.Empty)
        {
            NavigationManager.NavigateTo($"/firmcontractclause/{result.EntityID}");
        }
        StateHasChanged();
    }

    IList<IDragableElement> DocumentToolbarItems = new List<IDragableElement>() {
        new DocumentHeader() { State = DocumentBuilderElementListType.Toolbar },
        new DocumentParagraph() { State = DocumentBuilderElementListType.Toolbar },
        new DocumentClause() { State = DocumentBuilderElementListType.Toolbar },
        new DocumentUserField() { State = DocumentBuilderElementListType.Toolbar },
        new DocumentSignature() { State = DocumentBuilderElementListType.Toolbar },
        new DocumentList() { State = DocumentBuilderElementListType.Toolbar }
    };

    IList<IDragableElement> DocumentElements = new List<IDragableElement>();

    public async void OnSave(string value)
    {
        ContractClause.ClauseText = DocumentParser.ParseToSave(value, userFields, userClauses, new List<ContractTransactionEntityDataField>(), userEntityClauses);
        await SaveContractClause();
    }

    private void Back()
    {
        NavigationManager.NavigateTo($"/firmcontracttransaction/{ContractTransactionID}");
    }
}
